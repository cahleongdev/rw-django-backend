# Generated by Django 5.1.4 on 2025-04-15 21:52

import django.contrib.auth.models
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Agency",
            fields=[
                (
                    "agency_title",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "admin_privileges",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "school_privileges",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("access_school", models.BooleanField(default=False)),
                ("home_url", models.URLField(blank=True, null=True)),
                (
                    "agency_unique_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "authorize_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("University", "University"),
                            ("County", "Country"),
                            ("District", "District"),
                            ("State-Wide", "State-Wide"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "jurisdiction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("State", "State"),
                            ("City", "City"),
                            ("Country", "Country"),
                            ("Other", "Other"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                ("calendar_year", models.DateField(blank=True, null=True)),
                ("number_of_schools", models.IntegerField(blank=True, null=True)),
                (
                    "number_of_impacted_students",
                    models.IntegerField(blank=True, null=True),
                ),
                ("domain", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "annual_budget",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Framework",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("receiver", models.CharField(blank=True, max_length=50, null=True)),
                ("read", models.BooleanField(default=False)),
                ("type", models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ReportCategory",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="Color code for the category (e.g., #FF0000)",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Rubric",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("profile_image", models.URLField(blank=True, null=True)),
                ("role", models.CharField(blank=True, max_length=20, null=True)),
                ("title", models.CharField(default="Member", max_length=20)),
                ("notification_settings", models.JSONField(default=dict)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "agency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.agency",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "agency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.agency",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationSchool",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True, default="incompleted", max_length=50, null=True
                    ),
                ),
                ("submission_time", models.DateTimeField(blank=True, null=True)),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.application",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationMessage",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("content", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "application_school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationschool",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationSchoolSection",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("finalized", "Finalized"),
                            ("evaluation", "Evaluation"),
                            ("review", "Review"),
                            ("returned", "Returned"),
                            ("incompleted", "Incompleted"),
                        ],
                        default=("incompleted", "Incompleted"),
                        max_length=50,
                    ),
                ),
                (
                    "application_school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationschool",
                    ),
                ),
                (
                    "assigned_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationSchoolSubSection",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("finalized", "Finalized"),
                            ("evaluation", "Evaluation"),
                            ("review", "Review"),
                            ("returned", "Returned"),
                            ("incompleted", "Incompleted"),
                        ],
                        default=("incompleted", "Incompleted"),
                        max_length=50,
                    ),
                ),
                ("answers", models.JSONField(blank=True, null=True)),
                (
                    "application_school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationschool",
                    ),
                ),
                (
                    "assigned_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationComment",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("content", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "application_school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationschool",
                    ),
                ),
                (
                    "application_school_section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationschoolsection",
                    ),
                ),
                (
                    "application_school_sub_section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationschoolsubsection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ApplicationSection",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.application",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rubric",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.rubric",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="applicationschoolsection",
            name="application_section",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.applicationsection"
            ),
        ),
        migrations.CreateModel(
            name="ApplicationSubSection",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "application_section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationsection",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rubric",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.rubric",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="applicationschoolsubsection",
            name="application_sub_section",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="app.applicationsubsection",
            ),
        ),
        migrations.CreateModel(
            name="ApplicationQuestion",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("short_text", "Short Text"),
                            ("long_text", "Long Text"),
                            ("single_choice", "Single Choice"),
                            ("multiple_choide", "Multiple Choice"),
                            ("upload", "Upload"),
                        ],
                        default=("short_text", "Short Text"),
                        max_length=50,
                    ),
                ),
                ("content", models.JSONField(blank=True, null=True)),
                (
                    "application_sub_section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.applicationsubsection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("content", models.TextField(blank=True, null=True)),
                ("type", models.CharField(blank=True, max_length=50, null=True)),
                ("file_urls", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "receiver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("report", models.CharField(blank=True, max_length=200)),
                ("file_format", models.JSONField(blank=True, default=list)),
                ("domain", models.CharField(blank=True, max_length=255)),
                (
                    "use_scoring",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this report uses scoring criteria",
                    ),
                ),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("SPECIFIC_DATES", "Specific Dates"),
                            ("RECURRING_DATES", "Recurring Dates"),
                        ],
                        default="SPECIFIC_DATES",
                        help_text="Type of scheduling for this report",
                        max_length=50,
                    ),
                ),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "completion_time",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("content", models.JSONField(blank=True, null=True)),
                ("video_url", models.URLField(blank=True, null=True)),
                ("video_cover", models.URLField(blank=True, null=True)),
                ("file_urls", models.JSONField(blank=True, default=list)),
                ("tag", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "submission_format",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Other", "Other"),
                            ("State", "State"),
                            ("Local", "Local"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "recurring_period",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DAY", "Day"),
                            ("WEEK", "Week"),
                            ("MONTH", "Month"),
                            ("YEAR", "Year"),
                            ("QUARTER", "Quarter"),
                        ],
                        help_text="Period for recurring schedules (daily, weekly, monthly, yearly)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "recurring_interval",
                    models.IntegerField(
                        blank=True,
                        help_text="Interval between recurring schedules (e.g., every 2 weeks)",
                        null=True,
                    ),
                ),
                (
                    "recurring_occurrences",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of times the schedule should repeat",
                        null=True,
                    ),
                ),
                (
                    "recurring_first_occurrence",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start date for recurring schedules",
                        null=True,
                    ),
                ),
                (
                    "approved",
                    models.BooleanField(
                        default=False, help_text="Whether this report has been approved"
                    ),
                ),
                (
                    "agency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.agency",
                    ),
                ),
                (
                    "edited_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="edited_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True, related_name="reports", to="app.reportcategory"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReportActivity",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="app.report",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="report_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReportSchedule",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("schedule_time", models.DateTimeField()),
                ("report_name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="app.report",
                    ),
                ),
            ],
            options={
                "ordering": ["schedule_time"],
            },
        ),
        migrations.CreateModel(
            name="ReportScoring",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "exceed",
                    models.TextField(
                        blank=True,
                        help_text="Criteria for Exceeding Expectations",
                        null=True,
                    ),
                ),
                (
                    "meet",
                    models.TextField(
                        blank=True,
                        help_text="Criteria for Meeting Expectations",
                        null=True,
                    ),
                ),
                (
                    "approach",
                    models.TextField(
                        blank=True,
                        help_text="Criteria for Approaching Expectations",
                        null=True,
                    ),
                ),
                (
                    "notmeet",
                    models.TextField(
                        blank=True,
                        help_text="Criteria for Not Meeting Expectations",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scoring",
                        to="app.report",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoomMessage",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("content", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("file_urls", models.JSONField(blank=True, default=list)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="app.room",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_room_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="FrameworkSection",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("score_types", models.JSONField(blank=True, null=True)),
                (
                    "framework",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.framework"
                    ),
                ),
                (
                    "rubric",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.rubric",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "gradeserved",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=20),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("county", models.CharField(blank=True, max_length=100, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True, default="Pending", max_length=20, null=True
                    ),
                ),
                ("address", models.CharField(blank=True, max_length=200, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("zipcode", models.CharField(blank=True, max_length=20, null=True)),
                ("district", models.CharField(blank=True, max_length=100, null=True)),
                ("type", models.CharField(max_length=50, null=True)),
                ("logo", models.URLField(blank=True, null=True)),
                ("number_lea", models.CharField(blank=True, max_length=50, null=True)),
                ("creator", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "agency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.agency",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RateFramework",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("finalized", "Finalized")],
                        max_length=50,
                    ),
                ),
                (
                    "framework",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.framework"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Complaint",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=100, null=True)),
                ("last_name", models.CharField(blank=True, max_length=100, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("status", models.CharField(blank=True, max_length=15, null=True)),
                ("opened_date", models.DateTimeField(blank=True, null=True)),
                ("resolved_date", models.DateTimeField(blank=True, null=True)),
                (
                    "agency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.agency",
                    ),
                ),
                (
                    "assigned_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.school",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="applicationschool",
            name="school",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.school"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="school",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.school",
            ),
        ),
        migrations.CreateModel(
            name="SchoolDocument",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("file_url", models.CharField(blank=True, max_length=255, null=True)),
                ("type", models.CharField(blank=True, max_length=50, null=True)),
                ("name", models.CharField(blank=True, max_length=50, null=True)),
                ("year", models.CharField(blank=True, max_length=50, null=True)),
                ("created_by", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.school",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SchoolReport",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "assigned_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the report was assigned to the school",
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.report"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("score", models.CharField(max_length=255)),
                ("color", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "rubric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.rubric"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="applicationschoolsubsection",
            name="grad",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.score",
            ),
        ),
        migrations.AddField(
            model_name="applicationschoolsection",
            name="grad",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.score",
            ),
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("due_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True, default="incompleted", max_length=50, null=True
                    ),
                ),
                ("school_submission_date", models.DateTimeField(blank=True, null=True)),
                (
                    "evaluator_submission_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "school_submission_explanation",
                    models.TextField(blank=True, null=True),
                ),
                ("file_urls", models.JSONField(blank=True, default=list)),
                (
                    "agency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.agency",
                    ),
                ),
                (
                    "assigned_member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "evaluator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluated_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.report"
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="app.school"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubmissionInstruction",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("CERTIFICATE_ONLY", "Certificate Only"),
                            ("DEFAULT_RESPONSE", "Default Response"),
                            ("RESPONSE_REQUIRED", "Response Required"),
                        ],
                        default="DEFAULT_RESPONSE",
                        max_length=50,
                    ),
                ),
                ("auto_accept", models.BooleanField(default=False)),
                (
                    "allow_submission",
                    models.BooleanField(
                        default=False,
                        help_text="Whether submissions are currently allowed for this report",
                    ),
                ),
                ("questions", models.JSONField(blank=True, default=dict)),
                (
                    "accepted_files",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of accepted file types and their requirements",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "report",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submission_instruction",
                        to="app.report",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubmissionMessage",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("content", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="app.submission",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MessageReadBy",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("read_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="read_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="read_by",
                        to="app.roommessage",
                    ),
                ),
            ],
            options={
                "unique_together": {("message", "user")},
            },
        ),
        migrations.CreateModel(
            name="RoomUser",
            fields=[
                (
                    "id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                (
                    "room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_users",
                        to="app.room",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="room_users",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("room", "user")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="applicationschool",
            unique_together={("application", "school")},
        ),
    ]
